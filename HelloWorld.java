public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}

// # 1 class는 OOP의 기본 단위, class HelloWorld 라는 이름의 클래스를 만든다는 말
// # 1 public - HelloWorld라는 클래스는 누구나 사용할 수 있는 공적인 클래스라는 의미(접근제어자)(이외에도 private, protected)
// # 1  'HelloWorld'라는 이름의 공개된 클래스를 만든다
// # 1 첫 줄은 클래스를 만드는 코드

// # 2 HelloWorld 클래스 안에 위치함
// # 2 클래스 안에는 클래스가 어떤 동작을 할 지 정의해 주는데, 이 부분을 메소드라고 부릅니다. (클래스 안에 정의된 함수)
// # 2 두 번째 줄은 메소드를 만드는 코드
// # 2 main: 메소드의 이름으로 사용되고 있음, 자바 프로그램을 실행하면 가장 먼저 main을 찾아서 실행시키게 됨
// # 2 그렇기 때문에 main이라는 단어는 모든 자바 프로그램에 항상 포함되어 있습니다.(이름 바꾸면 안 됨)
// # 2 실행시키고 싶은 자바 코드가 있다면, main 안에 넣어주면 됩니다.

// # 2 public: main 메소드는 누구에게나 공개되어 있다는 의미
// # 2 static: static을 써주면 그 부분을 바로 실행 가능하게 만들어 줌
// # 2 main은 가장 첫 번째로 실행되어야 하기 때문에, main 앞에는 항상 static을 붙이게 됩니다.

// # 2 메소드는 필요에 따라 실행이 끝나고 어떤 값을 되돌려주기도 합니다. 그리고 그 되돌려줄 값이 무엇인지 미리 메소드 이름 앞에 써줍니다.
// void: 되돌려주는 값이 없다는 의미. 만약, 숫자형을 돌려줄 예정이면, void 대신 int를 쓰면 됨

// # 2 String[] arg: () 안에 존재하며 이 뜻은 메소드에 전달되는 값이라는 의미 ; 파라미터
// # 2  String[]은 문자열을 의미하고, args는 변수 이름 즉, args라는 이름의 문자열 변수가 메소드에 전달된다는 뜻
// # 2  지금 괄호의 주인은 main 메소드니깐, 누군가 main 메소드에게 파라미터를 전달해주면, main 메소드 안에서 args라는 이름으로 받아서 사용할 수 있음

// # 3 System: 객체 지향의 기본 단위가 클래스. System은 미리 직접 만들어둔 클래스 ( 입력, 출력 등 시스템에 관련된 기능을 모아둔 클래스)
// # 3 out: System out, System.in, System err등으로 분리되어 있음
// # 3 println(): ln == line, 괄호 안에 원하는 텍스트를 넣으면 출력해주고, 마지막에는 엔터를 치듯이 다음 줄로 넘겨주는 역할, 기능을 구현한 부분이기 때문에 메소드라고 부름
// # 3 이 줄은 'System'이라는 자바에 내장되어 있는 클래스의 'out' 안에 있는 'println' 메소드를 사용해서, Hello, World!를 출력하라는 뜻입니다.
